#%RAML 1.0
title: JISC Organisation API
version: v1
baseUri: https://www.jisc.ac.uk
types:
  OrganisationType:
    type: string
    enum: ["charity",
           "commercial",
           "funder",
           "furtherEducation",
           "government",
           "health",
           "higherEducation",
           "other",
           "professionalBody",
           "research",
           "school",
           "skills"]
  Organisation:
    type: object
    properties:
      organisationID: integer
      organisationName: string
      organisationType: OrganisationType
traits:
  cacheable:
    usage:
      Apply this trait to any GET method that supports caching control.
    responses:
      200:
        headers:
          Cache-Control:
            description: |
              Activates caching and defines cache behavior through cache
              response directives.
              Usually defines public or private (cacheable by proxy or not)
              and max-age for resource.
              See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
              for more information.
            type: string
            example: private, max-age=31536000
  cors:
    usage: Apply this trait to any GET method that supports
      Cross Origin Resource Sharing (CORS). You can read the
      [CORS W3C Recommendation](https://www.w3.org/TR/cors/), or
      [this intro](https://code.google.com/archive/p/html5security/wikis/CrossOriginRequestSecurity.wiki)
      from the HTML 5 Security Guide.
    responses:
      200:
        headers:
          Access-Control-Allow-Origin?:
            type: string
            enum: ["*"]
          Access-Control-Expose-Headers?:
            type: string
            enum: ["X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset"]
  rateLimited:
    usage: Apply this trait to any GET method that will be subject to
           Rate Limiting.
    responses:
      200:
        headers: &commonHeaders
          X-RateLimit-Limit:
            description: |
              The maximum number of requests that the consumer
              is permitted to make per hour.
            type: integer
            default: 1000

          X-RateLimit-Remaining:
            description: |
              The number of requests remaining in the current rate limit window.
            type: integer

          X-RateLimit-Reset:
            description: |
              The time at which the current rate limit window
              resets in UTC epoch seconds
      403:
        headers: *commonHeaders
        body:
          application/json:
            type: object
            example: |
              {
                "message": "API rate limit exceeded for xxx.xxx.xxx.xxx.",
                "documentation_url": "https://github.com/JiscRDSS/rdss-external-api-spec"
              }

/organisation:
  get:
    is: [ cacheable, cors, rateLimited ]
    responses:
      200:
        body:
          application/json:
            type: Organisation[]
            example: |
              [
                {
                  "organisationID": 274,
                  "organisationName": "University of Winchester",
                  "organisationType": "higherEducation"
                },
                {
                  "organisationID": 1539,
                  "organisationName": "Imperial College of Science, Technology and Medicine",
                  "organisationType": "charity"
                }
              ]
/organisation/{organisationID}:
  uriParameters:
    organisationID:
      type: integer
  get:
    is: [ cacheable, cors, rateLimited ]
    responses:
      200:
        body:
          application/json:
            type: Organisation
            example: |
              {
                "organisationID": 274,
                "organisationName": "University of Winchester",
                "organisationType": "higherEducation"
              }
      400:
        description: |
          "Organisation ID is invalid"
        body:
          application/json:
            type: object
            example: |
              {
                "error": "Organisation ID must be a number."
              }
/organisation/type/{organisationType}:
  uriParameters:
    organisationType:
      type: OrganisationType
  get:
    is: [ cacheable, cors, rateLimited ]
    responses:
      200:
        body:
          application/json:
            type: Organisation[]
            example: |
              [
                {
                  "organisationID": 240,
                  "organisationName": "St Mary's University, Twickenham",
                  "organisationType": "charity"
                },
                {
                  "organisationID": 1539,
                  "organisationName": "Imperial College of Science, Technology and Medicine",
                  "organisationType": "charity"
                }
              ]
      400:
        description: |
          "Organisation type is invalid."
        body:
            application/json:
              type: object
              example: |
                {
                  "error": "Organisation type is invalid. Look up for valid types."
                }
